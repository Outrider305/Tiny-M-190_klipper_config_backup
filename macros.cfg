##########################################################################################################################################################
#                    MACROS
##########################################################################################################################################################

######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	## PETG
	{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.09
	# PLA
	{% elif printer.heater_bed.target <= 65 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.035
	# Catch-all
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
  {% endif %}

##############################################################################################
#                  START
##############################################################################################

[gcode_macro PRINT_START]
gcode:        
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    
    RESETSPEEDS
    G28                            ; home all axes
    G1 Z20 F900                   ; move nozzle away from bed
    M104 S170
    M190 S{bedtemp}                                                              ; wait for bed temp
    #TEMPERATURE_WAIT SENSOR="Temperature_sensor chamber_temperature" MINIMUM={chambertemp}   ; wait for chamber temp
    # <insert routines>
    TEMPADJUSTPA
    NEVERMORE_ADJUST
    M109 S{hotendtemp}                                                           ; wait for hotend temp
    CLEANNOZZLE
    G28 Z                                                                        ; final z homing with hot nozzle
    SWIPENOZZLE
    PRIME_LINE

[gcode_macro PRIME_LINE]
description: Print an easy to remove parametric extruder priming line with a built-in handle.
gcode:
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(10)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to recract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(40)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}

    # sanity check and computed variables
    {% set max_x, max_y, nozzle_diameter = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float, printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [line.length, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding})  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{handle.width} Y{handle.width / 2} # move into position for printing handle
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE
   

##############################################################################################
#                  END/CANCEL
##############################################################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-15.0 F600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} F8000   ; move nozzle to remove stringing
    G0 Z{z_safe} F900
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} F8000  ; park nozzle at rear
    M107                                     ; turn off fan
    
#    BED_MESH_CLEAR

    UPDATE_DELAYED_GCODE ID=NEVERMORE_OFF DURATION=180													; turn nevermore off in 3 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800	 												; turn everything off in 30 min
    RESETSPEEDS
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=NEVERMORE_OFF DURATION=180													; turn nevermore off in 3 min
  UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800	 												; turn everything off in 30 min
  RESETSPEEDS
  CANCEL_PRINT_BASE

##############################################################################################
#                  PAUSE / RESUME
##############################################################################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SET_IDLE_TIMEOUT TIMEOUT=43200 ; set timeout to 12 hours

  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

##############################################################################################
#                  FILAMENT
##############################################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E200 F300
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F300                           ; extrude a little to soften tip 
	G1 E-100 F300                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT
   
[gcode_macro FILAMENT_PURGE]
gcode:
   G0 X192 Y75 F9000
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G92 E0.0
    G1 E50 F300
    G92 E0.0
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKPURGE
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKPURGE
	M109 S{t}
    LOAD_FILAMENT

[gcode_macro CLEANNOZZLE]
gcode:
	# Parameters
	# Iterations
	{% set i = params.I|default(5)|int %}
	# Speed
	{% set s = params.S|default(100)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=CLEANNOZZLE
	G90																; absolute positioning
  G0 Z10 F900
	G0 X192 Y126 F9000			; move to right of nozzle brush
	G0 Z0 F900													; move down to nozzle brush
	{% for iteration in range(i|int) %}
		G0 Y75 F{s*60}												; wipe back
		G0 Y126	F{s*60}												; wipe forth
	{% endfor %}
	G0 Y75	F{s*60}													; wipe back
	G0 Z10 F900												; raise
	RESTORE_GCODE_STATE NAME=CLEANNOZZLE

[gcode_macro SWIPENOZZLE]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
  G0 Z10 F900
	G0 X192 Y126 F3000 			; move to rear of nozzle brush
	G0 Z0	F900													; lower
	G0 Y75 F3000													; wipe forward
	G0 Z10	F900												; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE
##############################################################################################
#                  FAN CONTROL
##############################################################################################

[delayed_gcode NEVERMORE_OFF]
gcode:
  SET_FAN_SPEED FAN=nevermore SPEED=0

[gcode_macro NEVERMORE_ADJUST]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_FAN_SPEED FAN=nevermore SPEED=0.5
	## PETG
	{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
		SET_FAN_SPEED FAN=nevermore SPEED=0
	# PLA
	{% elif printer.heater_bed.target <= 65 %}
		SET_FAN_SPEED FAN=nevermore SPEED=0
	# Catch-all
	{% else %}
		SET_FAN_SPEED FAN=nevermore SPEED=0.5
  {% endif %}

  
########################################################################################################################################################################
#########          Ellis Macros
########################################################################################################################################################################



######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}

########################################################
#                  CHAMBER TEMP 
########################################################

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	SET_FAN_SPEED FAN=nevermore SPEED=0.5		 		; turn off exhaust fan
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S170									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}



########################################################
#                  PARKING 
########################################################
# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} F9000	
  G0 Z{printer.toolhead.axis_maximum.z/2} F900
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+25} F9000		
  G0 Z20 F900							
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} F9000
  G0 Z{printer.toolhead.axis_maximum.z-50} F900		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F9000	
  G0 Z{printer.toolhead.axis_maximum.z/2} F900
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 20mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F9000
  G0 Z20 F900										
	RESTORE_GCODE_STATE NAME=PARKBED

  # Park at purge bucket
[gcode_macro PARKPURGE]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKPURGE
	G90                                   																						; absolute positioning
  G0 Z50 F900
	G0 X192 Y75 F9000								
	RESTORE_GCODE_STATE NAME=PARKPURGE

###############################
####### Alias
###############################


# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
#	SET_FAN_SPEED FAN=Exhaust SPEED=0  				; turn exhaust fan off
#	SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
#	SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off
#	SET_PIN PIN=caselight VALUE=0					; turn light off
  
######################### SAFETY #########################

# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 HOLDCURRENT=0.35
	
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	

[gcode_macro RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}

[delayed_gcode DELAYED_OFF]
gcode:
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
# BedFansOff
	_TURN_OFF_HEATERS

######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### MISC #########################





